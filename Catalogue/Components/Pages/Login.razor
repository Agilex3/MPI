@page "/"
@using Catalogue.Controllers
@using Catalogue.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="loginModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="() => loginModel.Email" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="() => loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-2">
            @errorMessage
        </div>
    }
</EditForm>

<p>Don't have an account? <NavLink href="/register">Register here</NavLink></p>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        Console.WriteLine($"Email: {loginModel.Email}, Password: {loginModel.Password}");

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7096/api/auth/", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<TokenResponseModel>();
                var token = responseData?.Token;

                if (!string.IsNullOrEmpty(token))
                {
                    // Store the token using session storage
                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", token);

                    // Redirect to a protected page after successful login
                    Navigation.NavigateTo("/home");
                }
                else
                {
                    errorMessage = "Invalid credentials.";
                }
            }
            else
            {
                errorMessage = "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
