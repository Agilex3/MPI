@page "/grades"
@using System.Net.Http.Json
@using Catalogue.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3 class="text-xl font-bold mb-4 text-center">Manage Grades</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-red-500 text-sm text-center mb-2">@ErrorMessage</p>
}

@if (grades != null && grades.Any())
{
    <table class="table-auto w-full mt-4 border">
        <thead>
            <tr>
                <th class="border px-4 py-2">Student Name</th>
                <th class="border px-4 py-2">Course</th>
                <th class="border px-4 py-2">Grade</th>
                <th class="border px-4 py-2">Graded At</th>
                <th class="border px-4 py-2">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var grade in grades)
            {
                <tr>
                    <td class="border px-4 py-2">@grade.Student.first_name @grade.Student.last_name</td>
                    <td class="border px-4 py-2">@grade.Course.Name</td>
                    <td class="border px-4 py-2">@grade.GradeValue</td>
                    <td class="border px-4 py-2">@grade.GradedAt.ToShortDateString()</td>
                    <td class="border px-4 py-2">
                        <button class="btn btn-info" @onclick="async () => await ViewGradeHistory(grade.StudentId)">View History</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-center mt-4">No grades available.</p>
}

@if (showGradeHistoryModal)
{
    <div class="modal" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Grade History for @selectedStudentName</h5>
                    <button type="button" class="btn-close" @onclick="CloseGradeHistoryModal"></button>
                </div>
                <div class="modal-body" style="max-height: 400px; overflow-y: auto;">
                    @if (gradeHistory != null && gradeHistory.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Course</th>
                                    <th>Grade</th>
                                    <th>Graded At</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in gradeHistory)
                                {
                                    <tr>
                                        <td>@item.Course?.Name</td>
                                        <td>@item.GradeValue</td>
                                        <td>@item.GradedAt.ToShortDateString()</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No grades found for this student.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Grade> grades = new();
    private List<User> students = new();
    private List<Course> courses = new();

    private List<Grade> gradeHistory = new();
    private string selectedStudentName = "";
    private bool showGradeHistoryModal = false;
    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadGrades();
        await LoadStudents();
        await LoadCourses();
    }

    private async Task LoadGrades()
    {
        grades = await Http.GetFromJsonAsync<List<Grade>>("api/GradeApi");
    }

    private async Task LoadStudents()
    {
        students = await Http.GetFromJsonAsync<List<User>>("api/UserApi");
    }

    private async Task LoadCourses()
    {
        courses = await Http.GetFromJsonAsync<List<Course>>("api/CourseApi");
    }

    private async Task ViewGradeHistory(int studentId)
    {
        gradeHistory = grades
            .Where(g => g.StudentId == studentId)
            .OrderByDescending(g => g.GradedAt)
            .ToList();

        var student = students.FirstOrDefault(s => s.id == studentId);
        selectedStudentName = student != null ? $"{student.first_name} {student.last_name}" : "Unknown";

        showGradeHistoryModal = true;
        StateHasChanged();
    }

    private void CloseGradeHistoryModal()
    {
        showGradeHistoryModal = false;
    }
}
