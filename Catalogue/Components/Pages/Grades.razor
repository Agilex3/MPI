@page "/grades"
@using System.Net.Http.Json
@using Catalogue.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3 class="text-xl font-bold mb-4 text-center">Manage Grades</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-red-500 text-sm text-center mb-2">@ErrorMessage</p>
}

@if (grades != null && grades.Any())
{
    <table class="table-auto w-full mt-4 border">
        <thead>
            <tr>
                <th class="border px-4 py-2">Student Name</th>
                <th class="border px-4 py-2">Course</th>
                <th class="border px-4 py-2">Grade</th>
                <th class="border px-4 py-2">Graded At</th>
                <th class="border px-4 py-2">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var grade in grades)
            {
                <tr>
                    <td class="border px-4 py-2">@grade.Student.first_name @grade.Student.last_name</td>
                    <td class="border px-4 py-2">@grade.Course.Name</td>
                    <td class="border px-4 py-2">@grade.GradeValue</td>
                    <td class="border px-4 py-2">@grade.GradedAt.ToShortDateString()</td>
                    <td class="border px-4 py-2">
                        <button class="btn btn-warning me-1" @onclick="() => EditGrade(grade.Id)">Edit</button>
                        <button class="btn btn-danger me-1" @onclick="() => DeleteGrade(grade.Id)">Delete</button>
                        <button class="btn btn-info" @onclick="() => ViewGradeHistory(grade.StudentId)">View History</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-center mt-4">No grades available.</p>
}

<!-- Add/Edit Grade Modal -->
@if (showAddGradeModal)
{
    <div class="modal" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@ModalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddGradeModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@gradeModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Student</label>
                            <InputSelect @bind-Value="gradeModel.StudentId" class="form-control">
                                @foreach (var student in students)
                                {
                                    <option value="@student.id">@student.first_name @student.last_name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Course</label>
                            <InputSelect @bind-Value="gradeModel.CourseId" class="form-control">
                                @foreach (var course in courses)
                                {
                                    <option value="@course.Id">@course.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Grade</label>
                            <InputNumber @bind-Value="gradeModel.GradeValue" min="1" max="10" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Graded At</label>
                            <InputDate @bind-Value="gradeModel.GradedAt" class="form-control" />
                        </div>

                        <button type="submit" class="btn btn-success">Save Grade</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Grade History Modal -->
@if (showGradeHistoryModal)
{
    <div class="modal" style="display: block;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Grade History for @selectedStudentName</h5>
                    <button type="button" class="btn-close" @onclick="CloseGradeHistoryModal"></button>
                </div>
                <div class="modal-body">
                    @if (gradeHistory != null && gradeHistory.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Course</th>
                                    <th>Grade</th>
                                    <th>Graded At</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in gradeHistory)
                                {
                                    <tr>
                                        <td>@item.Course.Name</td>
                                        <td>@item.GradeValue</td>
                                        <td>@item.GradedAt.ToShortDateString()</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No grades found for this student.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

<p class="text-sm text-center mt-4">
    <button class="btn btn-success" @onclick="ShowAddGradeModal">Add New Grade</button>
</p>

@code {
    private List<Grade> grades;
    private List<User> students;
    private List<Course> courses;
    private Grade gradeModel = new Grade();
    private GradeDTO gradeDTOModel = new GradeDTO();
    private bool showAddGradeModal = false;
    private bool showGradeHistoryModal = false;
    private List<Grade> gradeHistory = new();
    private string selectedStudentName = "";
    private string ErrorMessage;
    private string ModalTitle = "Add Grade";

    protected override async Task OnInitializedAsync()
    {
        await LoadGrades();
        await LoadStudents();
        await LoadCourses();
    }

    private async Task LoadGrades()
    {
        if (Http.BaseAddress == null)
        {
            Http.BaseAddress = new Uri(Navigation.BaseUri);
        }
        grades = await Http.GetFromJsonAsync<List<Grade>>("api/GradeApi");
    }

    private async Task LoadStudents()
    {
        if (Http.BaseAddress == null)
        {
            Http.BaseAddress = new Uri(Navigation.BaseUri);
        }
        students = await Http.GetFromJsonAsync<List<User>>("api/UserApi");
    }

    private async Task LoadCourses()
    {
        if (Http.BaseAddress == null)
        {
            Http.BaseAddress = new Uri(Navigation.BaseUri);
        }
        courses = await Http.GetFromJsonAsync<List<Course>>("api/CourseApi");
    }

    private void ShowAddGradeModal()
    {
        gradeModel = new Grade
            {
                GradedAt = DateTime.Today
            };
        ModalTitle = "Add Grade";
        showAddGradeModal = true;
    }

    private void CloseAddGradeModal()
    {
        showAddGradeModal = false;
    }

    private async Task HandleSubmit()
    {
        if (gradeModel.Id == 0)
        {
            await AddGrade();
        }
        else
        {
            await UpdateGrade();
        }
    }

    private async Task AddGrade()
    {
        try
        {
            var student = students.FirstOrDefault(s => s.id == gradeModel.StudentId);
            var course = courses.FirstOrDefault(c => c.Id == gradeModel.CourseId);

            if (student == null || course == null)
            {
                ErrorMessage = "Invalid student or course selection.";
                return;
            }

            if (gradeModel.GradedAt == default)
            {
                gradeModel.GradedAt = DateTime.Now;
            }

            var gradeDTOModel = new GradeDTO
                {
                    StudentId = gradeModel.StudentId,
                    CourseId = gradeModel.CourseId,
                    GradeValue = Math.Clamp(gradeModel.GradeValue, 1, 10),
                    GradedAt = gradeModel.GradedAt,
                };

            var response = await Http.PostAsJsonAsync("api/GradeApi", gradeDTOModel);

            if (response.IsSuccessStatusCode)
            {
                await LoadGrades();
                CloseAddGradeModal();
            }
            else
            {
                ErrorMessage = "Failed to add grade.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task UpdateGrade()
    {
        try
        {
            var student = students.FirstOrDefault(s => s.id == gradeModel.StudentId);
            var course = courses.FirstOrDefault(c => c.Id == gradeModel.CourseId);

            if (student == null || course == null)
            {
                ErrorMessage = "Invalid student or course selection.";
                return;
            }

            gradeModel.Student = student;
            gradeModel.Course = course;

            var response = await Http.PutAsJsonAsync($"api/GradeApi/{gradeModel.Id}", gradeModel);

            if (response.IsSuccessStatusCode)
            {
                await LoadGrades();
                CloseAddGradeModal();
            }
            else
            {
                ErrorMessage = "Failed to update grade.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task EditGrade(int id)
    {
        var existingGrade = grades.FirstOrDefault(g => g.Id == id);
        if (existingGrade != null)
        {
            gradeModel = new Grade
                {
                    Id = existingGrade.Id,
                    StudentId = existingGrade.StudentId,
                    CourseId = existingGrade.CourseId,
                    GradeValue = existingGrade.GradeValue,
                    GradedAt = existingGrade.GradedAt
                };
            ModalTitle = "Edit Grade";
            showAddGradeModal = true;
        }
    }

    private async Task DeleteGrade(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/GradeApi/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadGrades();
            }
            else
            {
                ErrorMessage = "Failed to delete grade.";
            }
        }
        catch
        {
            ErrorMessage = "An error occurred. Please try again later.";
        }
    }

    private async Task ViewGradeHistory(int studentId)
    {
        try
        {
            if (grades == null || grades.Count == 0)
                await LoadGrades();

            if (students == null || students.Count == 0)
                await LoadStudents();

            gradeHistory = grades
                .Where(g => g.StudentId == studentId)
                .OrderByDescending(g => g.GradedAt)
                .ToList();

            var student = students.FirstOrDefault(s => s.id == studentId);
            selectedStudentName = student != null ? $"{student.first_name} {student.last_name}" : "Unknown Student";

            showGradeHistoryModal = true;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load grade history: {ex.Message}";
        }
    }

    private void CloseGradeHistoryModal()
    {
        showGradeHistoryModal = false;
    }
}
