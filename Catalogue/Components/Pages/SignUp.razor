@page "/signup"
@using Catalogue.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Sign Up</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" />
        <ValidationMessage For="@(() => registerModel.FirstName)" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" />
        <ValidationMessage For="@(() => registerModel.LastName)" />
    </div>

    <div class="form-group">
        <label for="role">Role</label>
        <InputText id="role" class="form-control" @bind-Value="registerModel.Role" />
        <ValidationMessage For="@(() => registerModel.Role)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Sign Up</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (successMessage != null)
    {
        <div class="alert alert-success">@successMessage</div>
    }
</EditForm>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;
    private string successMessage;

    private async Task HandleRegister()
    {

        if (Http.BaseAddress == null)
        {
            Http.BaseAddress = new Uri(Navigation.BaseUri);
        }

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "api/auth/register")
                {
                    Content = JsonContent.Create(registerModel)
                };

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseMessage>();
                successMessage = "User registered successfully!";
                errorMessage = null;
                Navigation.NavigateTo("/");
            }
            else
            {
                var errorText = await response.Content.ReadAsStringAsync();
                errorMessage = !string.IsNullOrWhiteSpace(errorText) ? errorText : "An error occurred during registration.";
                var result = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                errorMessage = result?.Message ?? "An error occurred during registration.";
                successMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again later.";
            successMessage = null;
        }

    }

    public class RegisterModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Role { get; set; }
    }

    public class ErrorResponse
    {
        public string Message { get; set; }
    }
}
